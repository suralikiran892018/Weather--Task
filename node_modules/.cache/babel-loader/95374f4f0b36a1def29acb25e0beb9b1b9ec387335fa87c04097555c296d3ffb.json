{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Kiran Kumar/Desktop/task/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nexports.areIntervalsOverlapping = areIntervalsOverlapping;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link areIntervalsOverlapping} function options.\n */\n\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n * @param options - The object with options\n *\n * @returns Whether the time intervals are overlapping\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n *\n * @example\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\nfunction areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  var _sort = [+(0, _index.toDate)(intervalLeft.start), +(0, _index.toDate)(intervalLeft.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    leftStartTime = _sort2[0],\n    leftEndTime = _sort2[1];\n  var _sort3 = [+(0, _index.toDate)(intervalRight.start), +(0, _index.toDate)(intervalRight.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort4 = _slicedToArray(_sort3, 2),\n    rightStartTime = _sort4[0],\n    rightEndTime = _sort4[1];\n  if (options !== null && options !== void 0 && options.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","map":{"version":3,"names":["exports","areIntervalsOverlapping","_index","require","intervalLeft","intervalRight","options","toDate","start","end","sort","a","b","leftStartTime","leftEndTime","rightStartTime","rightEndTime","inclusive"],"sources":["C:/Users/Kiran Kumar/Desktop/task/node_modules/date-fns/areIntervalsOverlapping.js"],"sourcesContent":["\"use strict\";\nexports.areIntervalsOverlapping = areIntervalsOverlapping;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link areIntervalsOverlapping} function options.\n */\n\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n * @param options - The object with options\n *\n * @returns Whether the time intervals are overlapping\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n *\n * @example\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\nfunction areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  const [leftStartTime, leftEndTime] = [\n    +(0, _index.toDate)(intervalLeft.start),\n    +(0, _index.toDate)(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [\n    +(0, _index.toDate)(intervalRight.start),\n    +(0, _index.toDate)(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  if (options?.inclusive)\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n"],"mappings":"AAAA,YAAY;;AAAC;AACbA,OAAO,CAACC,uBAAuB,GAAGA,uBAAuB;AACzD,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuB,CAACG,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAE;EACrE,YAAqC,CACnC,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACK,MAAM,EAAEH,YAAY,CAACI,KAAK,CAAC,EACvC,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACK,MAAM,EAAEH,YAAY,CAACK,GAAG,CAAC,CACtC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAA;IAHhBC,aAAa;IAAEC,WAAW;EAIjC,aAAuC,CACrC,CAAC,CAAC,CAAC,EAAEZ,MAAM,CAACK,MAAM,EAAEF,aAAa,CAACG,KAAK,CAAC,EACxC,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACK,MAAM,EAAEF,aAAa,CAACI,GAAG,CAAC,CACvC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAA;IAHhBG,cAAc;IAAEC,YAAY;EAKnC,IAAIV,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEW,SAAS,EACpB,OAAOJ,aAAa,IAAIG,YAAY,IAAID,cAAc,IAAID,WAAW;EAEvE,OAAOD,aAAa,GAAGG,YAAY,IAAID,cAAc,GAAGD,WAAW;AACrE"},"metadata":{},"sourceType":"script","externalDependencies":[]}