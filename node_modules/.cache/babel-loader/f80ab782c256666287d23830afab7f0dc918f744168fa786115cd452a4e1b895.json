{"ast":null,"code":"\"use strict\";\n\nexports.eachYearOfInterval = eachYearOfInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link eachYearOfInterval} function options.\n */\n\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n *\n * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * const result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\nfunction eachYearOfInterval(interval, options) {\n  var _options$step;\n  var startDate = (0, _index.toDate)(interval.start);\n  var endDate = (0, _index.toDate)(interval.end);\n  var reversed = +startDate > +endDate;\n  var endTime = reversed ? +startDate : +endDate;\n  var currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  var dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachYearOfInterval","_index","require","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setHours","setMonth","step","dates","push","setFullYear","getFullYear","reverse"],"sources":["C:/Users/Kiran Kumar/Desktop/task/node_modules/date-fns/eachYearOfInterval.js"],"sourcesContent":["\"use strict\";\nexports.eachYearOfInterval = eachYearOfInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link eachYearOfInterval} function options.\n */\n\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n *\n * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * const result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\nfunction eachYearOfInterval(interval, options) {\n  const startDate = (0, _index.toDate)(interval.start);\n  const endDate = (0, _index.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,kBAAkB,GAAGA,kBAAkB;AAC/C,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,kBAAkB,CAACG,QAAQ,EAAEC,OAAO,EAAE;EAAA;EAC7C,IAAMC,SAAS,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACK,MAAM,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACpD,IAAMC,OAAO,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACK,MAAM,EAAEH,QAAQ,CAACM,GAAG,CAAC;EAEhD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,IAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EAChD,IAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGH,SAAS;EAClDO,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCD,WAAW,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAE1B,IAAIC,IAAI,oBAAGX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,IAAI,yDAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZL,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,IAAMM,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACJ,WAAW,IAAID,OAAO,EAAE;IAC9BK,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEhB,MAAM,CAACK,MAAM,EAAEM,WAAW,CAAC,CAAC;IAC3CA,WAAW,CAACM,WAAW,CAACN,WAAW,CAACO,WAAW,EAAE,GAAGJ,IAAI,CAAC;EAC3D;EAEA,OAAOL,QAAQ,GAAGM,KAAK,CAACI,OAAO,EAAE,GAAGJ,KAAK;AAC3C"},"metadata":{},"sourceType":"script","externalDependencies":[]}