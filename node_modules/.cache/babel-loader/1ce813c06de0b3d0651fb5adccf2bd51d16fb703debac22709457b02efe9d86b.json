{"ast":null,"code":"\"use strict\";\n\nexports.getWeekOfMonth = getWeekOfMonth;\nvar _index = require(\"./getDate.js\");\nvar _index2 = require(\"./getDay.js\");\nvar _index3 = require(\"./startOfMonth.js\");\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nfunction getWeekOfMonth(date, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  var defaultOptions = (0, _index4.getDefaultOptions)();\n  var weekStartsOn = (_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0;\n  var currentDayOfMonth = (0, _index.getDate)(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n  var startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));\n  var lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}","map":{"version":3,"names":["exports","getWeekOfMonth","_index","require","_index2","_index3","_index4","date","options","defaultOptions","getDefaultOptions","weekStartsOn","locale","currentDayOfMonth","getDate","isNaN","NaN","startWeekDay","getDay","startOfMonth","lastDayOfFirstWeek","remainingDaysAfterFirstWeek","Math","ceil"],"sources":["C:/Users/Kiran Kumar/Desktop/task/node_modules/date-fns/getWeekOfMonth.js"],"sourcesContent":["\"use strict\";\nexports.getWeekOfMonth = getWeekOfMonth;\nvar _index = require(\"./getDate.js\");\nvar _index2 = require(\"./getDay.js\");\nvar _index3 = require(\"./startOfMonth.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nfunction getWeekOfMonth(date, options) {\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const currentDayOfMonth = (0, _index.getDate)(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n\n  const startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));\n\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,cAAc,GAAGA,cAAc;AACvC,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACpC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;AACpC,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAE1C,IAAIG,OAAO,GAAGH,OAAO,CAAC,0BAA0B,CAAC;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,cAAc,CAACM,IAAI,EAAEC,OAAO,EAAE;EAAA;EACrC,IAAMC,cAAc,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,iBAAiB,GAAG;EACvD,IAAMC,YAAY,sDAChBH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,YAAY,yEACrBH,OAAO,aAAPA,OAAO,0CAAPA,OAAO,CAAEI,MAAM,6EAAf,gBAAiBJ,OAAO,0DAAxB,sBAA0BG,YAAY,yCACtCF,cAAc,CAACE,YAAY,kEAC3BF,cAAc,CAACG,MAAM,oFAArB,sBAAuBJ,OAAO,2DAA9B,uBAAgCG,YAAY,uCAC5C,CAAC;EAEH,IAAME,iBAAiB,GAAG,CAAC,CAAC,EAAEX,MAAM,CAACY,OAAO,EAAEP,IAAI,CAAC;EACnD,IAAIQ,KAAK,CAACF,iBAAiB,CAAC,EAAE,OAAOG,GAAG;EAExC,IAAMC,YAAY,GAAG,CAAC,CAAC,EAAEb,OAAO,CAACc,MAAM,EAAE,CAAC,CAAC,EAAEb,OAAO,CAACc,YAAY,EAAEZ,IAAI,CAAC,CAAC;EAEzE,IAAIa,kBAAkB,GAAGT,YAAY,GAAGM,YAAY;EACpD,IAAIG,kBAAkB,IAAI,CAAC,EAAEA,kBAAkB,IAAI,CAAC;EAEpD,IAAMC,2BAA2B,GAAGR,iBAAiB,GAAGO,kBAAkB;EAC1E,OAAOE,IAAI,CAACC,IAAI,CAACF,2BAA2B,GAAG,CAAC,CAAC,GAAG,CAAC;AACvD"},"metadata":{},"sourceType":"script","externalDependencies":[]}