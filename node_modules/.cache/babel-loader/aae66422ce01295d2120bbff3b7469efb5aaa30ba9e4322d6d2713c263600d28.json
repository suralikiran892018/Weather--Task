{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Kiran Kumar/Desktop/task/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\nvar _index = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  var _sort = [+(0, _index3.toDate)(intervalLeft.start), +(0, _index3.toDate)(intervalLeft.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    leftStart = _sort2[0],\n    leftEnd = _sort2[1];\n  var _sort3 = [+(0, _index3.toDate)(intervalRight.start), +(0, _index3.toDate)(intervalRight.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort4 = _slicedToArray(_sort3, 2),\n    rightStart = _sort4[0],\n    rightEnd = _sort4[1];\n\n  // Prevent NaN result if intervals don't overlap at all.\n  var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  var left = overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);\n  var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  var right = overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / _index2.millisecondsInDay);\n}","map":{"version":3,"names":["exports","getOverlappingDaysInIntervals","_index","require","_index2","_index3","intervalLeft","intervalRight","toDate","start","end","sort","a","b","leftStart","leftEnd","rightStart","rightEnd","isOverlapping","overlapLeft","left","getTimezoneOffsetInMilliseconds","overlapRight","right","Math","ceil","millisecondsInDay"],"sources":["C:/Users/Kiran Kumar/Desktop/task/node_modules/date-fns/getOverlappingDaysInIntervals.js"],"sourcesContent":["\"use strict\";\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\nvar _index = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [\n    +(0, _index3.toDate)(intervalLeft.start),\n    +(0, _index3.toDate)(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [\n    +(0, _index3.toDate)(intervalRight.start),\n    +(0, _index3.toDate)(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  // Prevent NaN result if intervals don't overlap at all.\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left =\n    overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right =\n    overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / _index2.millisecondsInDay);\n}\n"],"mappings":"AAAA,YAAY;;AAAC;AACbA,OAAO,CAACC,6BAA6B,GAAGA,6BAA6B;AACrE,IAAIC,MAAM,GAAGC,OAAO,CAAC,2CAA2C,CAAC;AACjE,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,6BAA6B,CAACK,YAAY,EAAEC,aAAa,EAAE;EAClE,YAA6B,CAC3B,CAAC,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,EAAEF,YAAY,CAACG,KAAK,CAAC,EACxC,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACG,MAAM,EAAEF,YAAY,CAACI,GAAG,CAAC,CACvC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAA;IAHhBC,SAAS;IAAEC,OAAO;EAIzB,aAA+B,CAC7B,CAAC,CAAC,CAAC,EAAEV,OAAO,CAACG,MAAM,EAAED,aAAa,CAACE,KAAK,CAAC,EACzC,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACG,MAAM,EAAED,aAAa,CAACG,GAAG,CAAC,CACxC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAA;IAHhBG,UAAU;IAAEC,QAAQ;;EAK3B;EACA,IAAMC,aAAa,GAAGJ,SAAS,GAAGG,QAAQ,IAAID,UAAU,GAAGD,OAAO;EAClE,IAAI,CAACG,aAAa,EAAE,OAAO,CAAC;;EAE5B;EACA,IAAMC,WAAW,GAAGH,UAAU,GAAGF,SAAS,GAAGA,SAAS,GAAGE,UAAU;EACnE,IAAMI,IAAI,GACRD,WAAW,GAAG,CAAC,CAAC,EAAEjB,MAAM,CAACmB,+BAA+B,EAAEF,WAAW,CAAC;EACxE,IAAMG,YAAY,GAAGL,QAAQ,GAAGF,OAAO,GAAGA,OAAO,GAAGE,QAAQ;EAC5D,IAAMM,KAAK,GACTD,YAAY,GAAG,CAAC,CAAC,EAAEpB,MAAM,CAACmB,+BAA+B,EAAEC,YAAY,CAAC;;EAE1E;EACA,OAAOE,IAAI,CAACC,IAAI,CAAC,CAACF,KAAK,GAAGH,IAAI,IAAIhB,OAAO,CAACsB,iBAAiB,CAAC;AAC9D"},"metadata":{},"sourceType":"script","externalDependencies":[]}