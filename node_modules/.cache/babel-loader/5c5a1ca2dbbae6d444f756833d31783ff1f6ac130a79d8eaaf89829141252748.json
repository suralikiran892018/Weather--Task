{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kiran Kumar\\\\Desktop\\\\task\\\\src\\\\components\\\\FarmerWeather.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getTime = timeStamp => {\n  return `${new Date(timeStamp * 1000).getHours()} : ${new Date(timeStamp * 1000).getMinutes()}`;\n};\nconst FarmerWeather = props => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [forecastData, setForecastData] = useState(props.forecastData);\n  const handleDateChange = event => {\n    const newDate = new Date(event.target.value);\n    setSelectedDate(newDate);\n    // Assuming you have a function to fetch forecast data for the selected date\n    const updatedForecastData = fetchForecastData(newDate);\n    setForecastData(updatedForecastData);\n  };\n  const fetchForecastData = date => {\n    // Mock function to simulate fetching forecast data based on the selected date\n    // Replace this with actual API calls to get forecast data\n    return [{\n      date: date.toDateString(),\n      temp: 28,\n      description: 'sunny',\n      icon: 'sunny'\n    }, {\n      date: new Date(date.getTime() + 86400000).toDateString(),\n      temp: 30,\n      description: 'cloudy',\n      icon: 'cloudy'\n    }, {\n      date: new Date(date.getTime() + 2 * 86400000).toDateString(),\n      temp: 27,\n      description: 'rainy',\n      icon: 'rain'\n    }];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weatherInfo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather Suitability for Farming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature: \", Math.round(props.weatherData.temp), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Humidity: \", props.weatherData.humidity, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rain: \", props.weather.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wind Speed: \", props.windData.speed, \" mph\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'white',\n        fontWeight: 'bold'\n      },\n      children: [\"Overall: \", props.weather.description.includes('rain') ? 'Check for updates' : 'Suitable for farming']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"forecast-date\",\n        children: \"Select Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"forecast-date\",\n        value: selectedDate.toISOString().split('T')[0],\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Three-Day Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), forecastData.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-day\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: day.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `assets/${day.icon}.svg`,\n          width: 50,\n          alt: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [day.temp, \"\\xB0C - \", day.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(FarmerWeather, \"F3GkVPEiLjuQs0s54/cctVRerwo=\");\n_c = FarmerWeather;\nexport default FarmerWeather;\nvar _c;\n$RefreshReg$(_c, \"FarmerWeather\");","map":{"version":3,"names":["React","useState","getTime","timeStamp","Date","getHours","getMinutes","FarmerWeather","props","selectedDate","setSelectedDate","forecastData","setForecastData","handleDateChange","event","newDate","target","value","updatedForecastData","fetchForecastData","date","toDateString","temp","description","icon","Math","round","weatherData","humidity","weather","windData","speed","color","fontWeight","includes","toISOString","split","map","day","index"],"sources":["C:/Users/Kiran Kumar/Desktop/task/src/components/FarmerWeather.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst getTime = (timeStamp) => {\r\n  return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\r\n    timeStamp * 1000\r\n  ).getMinutes()}`;\r\n};\r\n\r\nconst FarmerWeather = (props) => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [forecastData, setForecastData] = useState(props.forecastData);\r\n\r\n  const handleDateChange = (event) => {\r\n    const newDate = new Date(event.target.value);\r\n    setSelectedDate(newDate);\r\n    // Assuming you have a function to fetch forecast data for the selected date\r\n    const updatedForecastData = fetchForecastData(newDate);\r\n    setForecastData(updatedForecastData);\r\n  };\r\n\r\n  const fetchForecastData = (date) => {\r\n    // Mock function to simulate fetching forecast data based on the selected date\r\n    // Replace this with actual API calls to get forecast data\r\n    return [\r\n      { date: date.toDateString(), temp: 28, description: 'sunny', icon: 'sunny' },\r\n      { date: new Date(date.getTime() + 86400000).toDateString(), temp: 30, description: 'cloudy', icon: 'cloudy' },\r\n      { date: new Date(date.getTime() + 2 * 86400000).toDateString(), temp: 27, description: 'rainy', icon: 'rain' },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <div className='weatherInfo'>\r\n      <h2>Weather Suitability for Farming</h2>\r\n      <p>Temperature: {Math.round(props.weatherData.temp)}°C</p>\r\n      <p>Humidity: {props.weatherData.humidity}%</p>\r\n      <p>Rain: {props.weather.description}</p>\r\n      <p>Wind Speed: {props.windData.speed} mph</p>\r\n      <p style={{ color: 'white', fontWeight: 'bold' }}>\r\n        Overall: {props.weather.description.includes('rain') ? 'Check for updates' : 'Suitable for farming'}\r\n      </p>\r\n      <div>\r\n        <label htmlFor=\"forecast-date\">Select Date: </label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"forecast-date\"\r\n          value={selectedDate.toISOString().split('T')[0]}\r\n          onChange={handleDateChange}\r\n        />\r\n      </div>\r\n      <div className='forecast'>\r\n        <h3>Three-Day Forecast</h3>\r\n        {forecastData.map((day, index) => (\r\n          <div key={index} className='forecast-day'>\r\n            <p>{day.date}</p>\r\n            <img src={`assets/${day.icon}.svg`} width={50} alt='icon'/>\r\n            <p>{day.temp}°C - {day.description}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FarmerWeather;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}